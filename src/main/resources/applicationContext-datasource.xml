<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
    </bean>

    <!--多个配置文件用逗号隔开或者用*进行模糊匹配，Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer(或<context:property-placeholder/>)-->
    <!--<context:property-placeholder location="datasource.properties" />-->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!--JDBC驱动类-->
        <property name="driverClassName" value="${db.driverClassName}"/>
        <!--数据库URL地址-->
        <property name="url" value="${db.url}"/>
        <!--访问数据库用户名-->
        <property name="username" value="${db.username}"/>
        <!--访问数据库的密码-->
        <property name="password" value="${db.password}"/>

        <!-- 初始化连接 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 最大活动连接 -->
        <property name="maxActive" value="${db.maxActive}"/>
        <!-- 最大空闲连接 -->
        <property name="maxIdle" value="${db.maxIdle}"/>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 从池中取连接的最大等待时间，单位ms. -->
        <property name="maxWait" value="${db.maxWait}"/>

        <!--验证连接有效与否的SQL，不同的数据库配置不同-->
        <property name="validationQuery" value="${db.validationQuery}"/>
        <!--借出连接时不要测试，否则很影响性能-->
        <property name="testOnBorrow" value="${db.testOnBorrow}"/>
        <!--指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.-->
        <property name="testWhileIdle" value="${db.testWhileIdle}"/>
        <!--每30秒运行一次空闲连接回收器，检测需要关闭的空闲连接-->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
        <!-- 池中的连接空闲60分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>

        <!--缓存preparedStatement，即开启PSCache-->
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"/>
        <!--PSCache大小-->
        <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"/>

        <!-- 超过removeAbandonedTimeout时间后，进行没用（废弃）连接的回收 -->
        <property name="removeAbandoned" value="${db.removeAbandoned}" />
        <!-- 超时时间限制（默认为300秒，调整为180） -->
        <property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />
        <!-- 当连接被回收时打印程序的stack traces日志 -->
        <property name="logAbandoned" value="${db.logAbandoned}" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"></property>

        <!-- 分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.chenqingyun.dao"/>
    </bean>

    <!--配置一个可以执行批量操作的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
        <constructor-arg name="executorType" value="BATCH" />
    </bean>

    <!-- 配置事务管理器(mybatis采用的是JDBC的事务管理器) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置基于 @Transactional 的声明式事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

    <!--配置基于 <tx> 命名空间的声明式事务, 配置事务增强, 事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="aopPointcut" expression="execution(* com.huangdw.service..*(..))"/>
        <!--配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="aopPointcut"/>
    </aop:config>

</beans>